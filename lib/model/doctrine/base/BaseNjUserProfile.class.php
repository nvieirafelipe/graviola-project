<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('NjUserProfile', 'doctrine');

/**
 * BaseNjUserProfile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $picture
 * @property string $address
 * @property string $complement
 * @property string $district
 * @property string $city
 * @property string $state
 * @property string $country
 * @property string $webpage
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property sfGuardUser $sfGuardUser
 * 
 * @method integer       getId()          Returns the current record's "id" value
 * @method integer       getUserId()      Returns the current record's "user_id" value
 * @method string        getPicture()     Returns the current record's "picture" value
 * @method string        getAddress()     Returns the current record's "address" value
 * @method string        getComplement()  Returns the current record's "complement" value
 * @method string        getDistrict()    Returns the current record's "district" value
 * @method string        getCity()        Returns the current record's "city" value
 * @method string        getState()       Returns the current record's "state" value
 * @method string        getCountry()     Returns the current record's "country" value
 * @method string        getWebpage()     Returns the current record's "webpage" value
 * @method timestamp     getCreatedAt()   Returns the current record's "created_at" value
 * @method timestamp     getUpdatedAt()   Returns the current record's "updated_at" value
 * @method sfGuardUser   getSfGuardUser() Returns the current record's "sfGuardUser" value
 * @method NjUserProfile setId()          Sets the current record's "id" value
 * @method NjUserProfile setUserId()      Sets the current record's "user_id" value
 * @method NjUserProfile setPicture()     Sets the current record's "picture" value
 * @method NjUserProfile setAddress()     Sets the current record's "address" value
 * @method NjUserProfile setComplement()  Sets the current record's "complement" value
 * @method NjUserProfile setDistrict()    Sets the current record's "district" value
 * @method NjUserProfile setCity()        Sets the current record's "city" value
 * @method NjUserProfile setState()       Sets the current record's "state" value
 * @method NjUserProfile setCountry()     Sets the current record's "country" value
 * @method NjUserProfile setWebpage()     Sets the current record's "webpage" value
 * @method NjUserProfile setCreatedAt()   Sets the current record's "created_at" value
 * @method NjUserProfile setUpdatedAt()   Sets the current record's "updated_at" value
 * @method NjUserProfile setSfGuardUser() Sets the current record's "sfGuardUser" value
 * 
 * @package    graviola
 * @subpackage model
 * @author     Felipe Vieira         <nvieirafelipe@gmail.com>;
               Jean Frizo            <jfrizo@gmail.com>;
               Rafael Mardegan       <mardegan.rafael@gmail.com>;
               Yohan Ara√∫jo          <yohanaraujo07@gmail.com>;
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseNjUserProfile extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('nj_user_profile');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('picture', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('address', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('complement', 'string', 128, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 128,
             ));
        $this->hasColumn('district', 'string', 128, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 128,
             ));
        $this->hasColumn('city', 'string', 128, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 128,
             ));
        $this->hasColumn('state', 'string', 128, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 128,
             ));
        $this->hasColumn('country', 'string', 128, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 128,
             ));
        $this->hasColumn('webpage', 'string', 128, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 128,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}